name: .NET Core Desktop Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]

    env:
      Solution_Name: CyberAiOpenChat.sln
      Wap_Project_Directory: CyberAiOpenChat.Package
      Wap_Project_Path: CyberAiOpenChat.Package\CyberAiOpenChat.Package.wapproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Show directory structure
      run: tree /F /A

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: nuget restore ${{ env.Solution_Name }}

    - name: Build solution
      run: |
        msbuild ${{ env.Solution_Name }} `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform="Any CPU" `
          /verbosity:diagnostic

    - name: Decode certificate
      run: |
        $pfxBytes = [Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certPath = "${{ env.Wap_Project_Directory }}\SigningCert.pfx"
        [IO.File]::WriteAllBytes($certPath, $pfxBytes)

    - name: Build package
      run: |
        msbuild ${{ env.Wap_Project_Path }} `
          /p:Configuration=${{ matrix.configuration }} `
          /p:AppxBundle=Always `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:PackageCertificateKeyFile=SigningCert.pfx `
          /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}" `
          /p:AppxPackageDir="$(Build.ArtifactStagingDirectory)\" `
          /verbosity:diagnostic

    - name: Verify artifacts
      run: |
        Get-ChildItem "$(Build.ArtifactStagingDirectory)" -Recurse -Include *.msix,*.appx | Format-Table -AutoSize
        if (!(Test-Path "$(Build.ArtifactStagingDirectory)\*.msix")) {
          Write-Host "##[error]No MSIX package created!"
          exit 1
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AppPackage
        path: $(Build.ArtifactStagingDirectory)/*.msix
