name: .NET Desktop Build and Package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  SOLUTION_PATH: CyberAiOpenChat.sln
  WAP_PROJECT_PATH: CyberAiOpenChat.Package/CyberAiOpenChat.Package.wapproj

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install Windows SDK
      run: choco install -y windows-sdk-10.0 --no-progress

    - name: Show solution structure
      run: |
        dir /s /b
        if not exist "%SOLUTION_PATH%" (
          echo "##[error]Solution file not found!"
          exit 1
        )

    - name: Restore packages
      run: dotnet restore "%SOLUTION_PATH%"

    - name: Build solution
      run: |
        dotnet build "%SOLUTION_PATH%" `
          --configuration Release `
          --no-restore `
          --verbosity detailed
        if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%

    - name: Prepare certificate
      run: |
        $certBytes = [Convert]::FromBase64String("${{ secrets.PFX_BASE64 }}")
        $certPath = "CyberAiOpenChat.Package/sign.pfx"
        [IO.File]::WriteAllBytes($certPath, $certBytes)
        dir CyberAiOpenChat.Package

    - name: Build package
      run: |
        msbuild "%WAP_PROJECT_PATH%" `
          /p:Configuration=Release `
          /p:AppxBundle=Always `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:PackageCertificateKeyFile=sign.pfx `
          /p:PackageCertificatePassword="${{ secrets.PFX_PASSWORD }}" `
          /p:AppxPackageDir="$(Build.ArtifactStagingDirectory)/AppPackages/" `
          /verbosity:diagnostic
        if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%

    - name: Verify package
      run: |
        dir "$(Build.ArtifactStagingDirectory)/AppPackages" /s
        if not exist "$(Build.ArtifactStagingDirectory)/AppPackages/*.msix" (
          echo "##[error]No MSIX package created!"
          exit 1
        )

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AppPackage
        path: $(Build.ArtifactStagingDirectory)/AppPackages/**/*.msix
